# shellcheck disable=SC2148

#### Functions
# Convertit une vidéo au format Kidigo (VTech)
# Vidéo : AVI en format MPEG4 SP (XVID), résolution : 480 x 272
#         Video Codec : Xvid, Video Bitrate : 1024 ou moins
# Son : Audio Codec : mp3, Audio Bitrate : 96
#       chanels  : 2, S.Rate (Hz) : maximum 44100
# Sous-titres : désactivés
function conv2kidigo {
# ffmpeg -i <input> -s <taille wxh> -sn (désactive les sous-titres) -b:v <video bitrate> -b:a <audio bitrate> -c:v <codec video> -c:a <codec audio> <output>
    filename=${1##*/}
    filebasename=${filename%.*}
    ffmpeg -i "$1" -c:v libxvid -s 480x272 -b:v 512k -sn -c:a mp3 -b:a 96k "$filebasename.kidigo.avi"
}

# Convertit une vidéo au format mp4 800x600
# Vidéo : MP4 en format H264, résolution : 800x600
# Son : Audio Codec : MP3, Audio Bitrate : 128
# Sous-titres : désactivés
function conv2mp4 {
# ffmpeg -i <input> -s <taille wxh> -sn (désactive les sous-titres) -b:v <video bitrate> -b:a <audio bitrate> -c:v <codec video> -c:a <codec audio> <output>
    filename=${1##*/}
    filebasename=${filename%.*}
    ffmpeg -i "$1" \
        -s 800x600 -c:v libx264 -crf 28 \
        -c:a libmp3lame -b:a 128k \
        -sn \
        "$filebasename.mp4"
}

# Log a message on stderr
# #@ the message to log
function hal_log {
    echo "# "$(basename "$0")" $(date +%F_%X) : $@">&2
}

# Backup function using rsync
# $1 source (/ at the end to backup the content)
# $2 destination
# $3... files to exclude
#
# see https://wiki.debian.org/fr/RsyncSnapshots
# see http://www.sanitarium.net/golug/rsync_backups_2010.html
# see http://uname.pingveno.net/blog/index.php/post/2015/02/21/Configurer-un-backup-incr%C3%A9mental-avec-duplicity,-rsync,-et-backupninja-sous-Debian
# see http://www.tecmint.com/linux-system-backup-tools/
# see http://www.cyberciti.biz/open-source/awesome-backup-software-for-linux-unix-osx-windows-systems/
#
# Some usefull rsync options
#  -a, --archive (equals -rlptgoD (no -H,-A,-X))
#  -A, --acls                  preserve ACLs (implies -p)
#  -C, --cvs-exclude
#      --devices               preserve device files (super-user only)
#      --specials              preserve special files
#  -D                          same as --devices --specials
#  -g, --group                 preserve group
#  -h, --human-readable        output numbers in a human-readable format
#  -H, --hard-links            preserve hard links
#  -l, --links                 copy symlinks as symlinks
#  -n, --dry-run
#  -o, --owner                 preserve owner (super-user only)
#  -p, --perms                 preserve permissions
#  -q, --quiet
#  -r, --recursive
#  -t, --times                 preserve modification times
#  -v, --verbose
#  -X, --xattrs                preserve extended attributes
#      --delete-before
#      --delete-after
#      --delete-excluded
#      --link-dest=DIR         hardlink to files in DIR when unchanged
#      --exclude-from=FILE     read exclude patterns from FILE
#      --stats                 give some file-transfer stats
#
function hal_backup {
    local src=$1
    shift
    local dest=$1
    shift

    hal_log "Backup : $src -> $dest : Started"

    if [ ! -d "$dest" ]; then
        # destination dir does not exists => create it
        mkdir -p "$dest"
    fi

    local exclude_file=$(tempfile)
    for line in "$@"; do
        echo "$line" >> $exclude_file
    done

    local previous_backup_dir="$dest/current"
    local backup_dir="$dest/$(date +%F_%X)"
    local current_rsync_options=(--stats -rlpth --delete)
    current_rsync_options+=(--delete-excluded --exclude-from=$exclude_file)
    if [[ -L $previous_backup_dir && -d $previous_backup_dir ]]; then
        # a backup already exists => link
        current_rsync_options+=(--link-dest="$previous_backup_dir")
    fi

    rsync "${current_rsync_options[@]}" \
          "$src" \
          "$backup_dir"
    local rsync_exit_code=$?

    rm -f $exclude_file

    if [ $rsync_exit_code == 0 ]; then
        hal_log "Backup : $src -> $dest : OK"
    else
        hal_log "Backup : $src -> $dest : Rsync error $rsync_exit_code"
    fi

    rm -f "$previous_backup_dir" 2>/dev/null
    ln -s "$backup_dir" "$previous_backup_dir"

    return $rsync_exit_code
}

# Test if a directory is mounted
function is_mounted {
    mount | grep "on $1" > /dev/null
    return $?
}

# Backup only if the first arg is mounted
function verify_mountpoint_and_backup {
    if is_mounted "$1"; then
        shift
        hal_backup "$@"
    else
        hal_log "Mount point $1 unavailable => backup aborted."
    fi
}

# Sync two dirs
# $1 source (/ at the end to backup the content)
# $2 destination
#
function hal_sync {
    local src=$1
    shift
    local dest=$1
    shift

    hal_log "Syncing : $src -> $dest : Started"

    if [ ! -d "$dest" ]; then
        # destination dir does not exists => create it
        mkdir -p "$dest"
    fi

    local current_rsync_options=(-ah --stats --delete)

    rsync "${current_rsync_options[@]}" \
          "$src" \
          "$dest"
    local rsync_exit_code=$?

    if [ $rsync_exit_code == 0 ]; then
        hal_log "Syncing : $src -> $dest : OK"
    else
        hal_log "Syncing : $src -> $dest : Rsync error $rsync_exit_code"
    fi

    return $rsync_exit_code
}

# Sync only if the first arg is mounted
function verify_mountpoint_and_sync {
    if is_mounted "$1"; then
        shift
        hal_sync "$@"
    else
        hal_log "Mount point $1 unavailable => sync aborted."
    fi
}
