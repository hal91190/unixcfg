# shellcheck disable=SC2148

# If not running interactively, don't do anything
[[ "$-" != *i* ]] && return

# {{{ Shell Options
#
# See man bash for more options...
#
# Don't wait for job termination notification
# set -o notify
#
# Don't use ^D to exit
# set -o ignoreeof
#
# Use case-insensitive filename globbing
# shopt -s nocaseglob

# Make bash append rather than overwrite the history on disk
shopt -s histappend

# When changing directory small typos can be ignored by bash
# for example, cd /vr/lgo/apaache would find /var/log/apache
shopt -s cdspell

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# }}}

# {{{ Completion options
#
# These completion tuning parameters change the default behavior of bash_completion:
#
# Define to access remotely checked-out files over passwordless ssh for CVS
# COMP_CVS_REMOTE=1
#
# Define to avoid stripping description in --option=description of './configure --help'
# COMP_CONFIGURE_HINTS=1
#
# Define to avoid flattening internal contents of tar files
# COMP_TAR_INTERNAL_PATHS=1
#
# Uncomment to turn on programmable completion enhancements.
# Any completions you add in ~/.bash_completion are sourced last.
[[ -f /etc/bash_completion ]] && . /etc/bash_completion

# Git completion for cygwin
[[ -f /usr/local/bin/git-completion.bash ]] && . /usr/local/bin/git-completion.bash

# }}}

# {{{ History Options
#
# don't put duplicate lines or lines starting with space in the history.
export HISTCONTROL=ignoreboth

# Ignore some controlling instructions
# HISTIGNORE is a colon-delimited list of patterns which should be excluded.
# The '&' is a special pattern which suppresses duplicate entries.
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit'
export HISTIGNORE="clear:history:[bf]g:exit:date:* --help:ls"

# Whenever displaying the prompt, write the previous line to disk
# export PROMPT_COMMAND="history -a"

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=2000
HISTFILESIZE=5000

# }}}

# {{{ Load all extra files
for file in ~/.{bash_aliases,bash_functions}; do
    [[ -r $file && -f $file ]] && . "$file";
done;
unset file;

[[ -f ~/Documents/Dev/git-subrepo/.rc ]] && . ~/Documents/Dev/git-subrepo/.rc

# }}}

# {{{ set variable identifying the chroot you work in (used in the prompt below)
[[ -z ${debian_chroot:-} && -r /etc/debian_chroot ]] && debian_chroot=$(cat /etc/debian_chroot)

# }}}

# {{{ TERM (should be set by the terminal)
case "$TERM" in
    xterm*) TERM=xterm-256color;;
esac

# }}}

# {{{ Prompt
# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|xterm-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [[ -n $force_color_prompt ]]; then
    if [[ -x /usr/bin/tput ]] && tput setaf 1 >&/dev/null; then
# We have color support; assume it's compliant with Ecma-48
# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
# a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

# git-prompt for cygwin
[[ -f /usr/local/bin/git-prompt.sh ]] && . /usr/local/bin/git-prompt.sh

# Show if there are unstaged (*) and/or staged (+) changes
export GIT_PS1_SHOWDIRTYSTATE=1

# Show if there is anything stashed ($)
export GIT_PS1_SHOWSTASHSTATE=1

# Show if there are untracked files (%)
export GIT_PS1_SHOWUNTRACKEDFILES=1

# Show how we're tracking relative to upstream
export GIT_PS1_SHOWUPSTREAM="verbose,name"

# Git prompt in color
export GIT_PS1_SHOWCOLORHINTS=1

if [[ $color_prompt = yes ]]; then
    # cf. https://mkaz.com/2014/04/17/the-bash-prompt/
    source ~/configs/extras/colors
    UTFChar1="\342\226\266"
    # PS1="${debian_chroot:+($debian_chroot)}\[$(tput bold)\]\[$(tput setaf 5)\]\u\[$(tput setaf 4)\]@\[$(tput setaf 5)\]\h\[$(tput setaf 4)\]:\[$(tput setaf 2)\]\w\[$(tput setaf 4)\]\\$ \[$(tput sgr0)\]"
    PROMPT_COMMAND='__git_ps1 "\[$Yellow\]\u\[$Cyan\]@\[$Yellow\]\h\[$Cyan\]:\[$Green\]\w\[$Color_Off\]" "\[$Cyan\] $UTFChar1 \[$Color_Off\]"'
    export PROMPT_COMMAND
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# }}}

# {{{ ENV
# General settings
export EDITOR="/usr/bin/vim"
export VISUAL="code --wait --new-window"

# Programing languages
# Most recent Java version
for java_dir in /usr/lib/jvm/{java-8-openjdk-amd64/,java-11-openjdk-amd64/,java-17-openjdk-amd64/,java-21-openjdk-amd64/,java-22-openjdk-amd64/}; do
    export JAVA_HOME="$java_dir"
done;
unset java_dir;

if [[ -d "/opt/groovy/bin" ]]; then
    export GROOVY_HOME=/opt/groovy
    export PATH=$PATH:$GROOVY_HOME/bin
fi

if [[ -d "/opt/gradle/bin" ]]; then
    export GRADLE_HOME=/opt/gradle
    export PATH=$PATH:$GRADLE_HOME/bin
fi

if [[ -d "$HOME/Documents/Dev/golang" ]]; then
    export GOPATH=$HOME/Documents/Dev/golang
fi

[[ -f "$HOME/.cargo/env" ]] && . "$HOME/.cargo/env"

# hadoop
if [[ -f "/usr/local/hadoop/etc/hadoop/hadoop-env.sh" ]]; then
    source /usr/local/hadoop/etc/hadoop/hadoop-env.sh
    export PATH=$PATH:$HADOOP_PREFIX/bin
fi

if [[ -d "/opt/hadoop/bin" ]]; then
    export HADOOP_PREFIX=/opt/hadoop
    export PATH=$PATH:$HADOOP_PREFIX/bin
fi

# spark
if [[ -d "/opt/spark/bin" ]]; then
    export PATH=$PATH:/opt/spark/bin
fi

# Arduino
if [[ -d "/usr/share/arduino" ]]; then
    export ARDMK_DIR=/usr/share/arduino
fi

if [[ -d "$HOME/bin" ]]; then
    export PATH=$PATH:~/bin
fi

# todo-txt
export TODOTXT_DEFAULT_ACTION=ls

# }}}

# {{{ Several other configurations
# make less more friendly for non-text input files, see lesspipe(1)
[[ -x /usr/bin/lesspipe ]] && eval "$(SHELL=/bin/sh lesspipe)"

# ssh-pageant
[[ -f "/usr/local/bin/ssh-pageant" ]] && eval "$(/usr/local/bin/ssh-pageant -r -a '/tmp/.ssh-pageant-$USERNAME')"

# fzf (https://junegunn.github.io/fzf/)
[[ -x /usr/bin/fzf ]] && eval "$(fzf --bash)"

# }}}
